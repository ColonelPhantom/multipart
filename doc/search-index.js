var searchIndex = {};
searchIndex["multipart"] = {"doc":"Client- and server-side abstractions for HTTP `multipart/form-data` requests.","items":[[0,"client","multipart","The client-side abstraction for multipart requests. Enabled with the `client` feature (on by\ndefault).",null,null],[3,"SizedRequest","multipart::client","A wrapper around a request object that measures the request body and sets the `Content-Length`\nheader to its size in bytes.",null,null],[3,"Multipart","","The entry point of the client-side multipart API.",null,null],[0,"hyper","","Client-side integration with [Hyper](https://github.com/hyperium/hyper).\nEnabled with the `hyper` feature (on by default).",null,null],[5,"content_type","multipart::client::hyper","Create a `Content-Type: multipart/form-data;boundary={bound}`",null,{"inputs":[{"name":"str"}],"output":{"name":"contenttype"}}],[11,"apply_headers","hyper::client::request","#Panics\nIf `self.method() != Method::Post`.",0,null],[11,"open_stream","","",0,null],[11,"finish","","",0,null],[0,"lazy","multipart::client","Multipart requests which write out their data in one fell swoop.",null,null],[3,"LazyError","multipart::client::lazy","An error for lazily written multipart requests, including the original error as well\nas the field which caused the error, if applicable.",null,null],[12,"field_name","","The field that caused the error.\nIf `None`, there was a problem opening the stream to write or finalizing the stream.",1,null],[12,"error","","The inner error.",1,null],[3,"Multipart","","A multipart request which writes all fields at once upon being provided an output stream.",null,null],[3,"PreparedFields","","The result of [`Multipart::prepare()`](struct.Multipart.html#method.prepare) or\n`Multipart::prepare_threshold()`. Implements `Read`, contains the entire request body.",null,null],[11,"client_request","","#### Feature: `hyper`\nComplete a POST request with the given `hyper::client::Client` and URL.",2,null],[11,"client_request_mut","","#### Feature: `hyper`\nComplete a POST request with the given `hyper::client::Client` and URL;\nallows mutating the `hyper::client::RequestBuilder` via the passed closure.",2,null],[11,"to_body","","#### Feature: `hyper`\nConvert `self` to `hyper::client::Body`.",3,null],[6,"LazyIoError","","A `LazyError` wrapping `std::io::Error`.",null,null],[11,"into","","",1,null],[11,"description","","",1,null],[11,"cause","","",1,null],[11,"fmt","","",1,null],[11,"fmt","","",1,null],[11,"default","","",2,{"inputs":[],"output":{"name":"multipart"}}],[11,"fmt","","",2,null],[11,"new","","Initialize a new lazy dynamic request.",2,{"inputs":[],"output":{"name":"self"}}],[11,"add_text","","Add a text field to this request.",2,null],[11,"add_file","","Add a file field to this request.",2,null],[11,"add_stream","","Add a generic stream field to this request,",2,null],[11,"send","","Convert `req` to `HttpStream`, write out the fields in this request, and finish the\nrequest, returning the response if successful, or the first error encountered.",2,null],[11,"prepare","","Export the multipart data contained in this lazy request as an adaptor which implements `Read`.",2,null],[11,"prepare_threshold","","Export the multipart data contained in this lazy request to an adaptor which implements `Read`.",2,null],[11,"content_len","","Get the content-length value for this set of fields, if applicable (all fields are sized,\ni.e. not generic streams).",3,null],[11,"read","","",3,null],[11,"write","multipart::client","",4,null],[11,"flush","","",4,null],[11,"apply_headers","","`SizedRequest` ignores `_content_len` because it sets its own later.",4,null],[11,"open_stream","","",4,null],[11,"finish","","",4,null],[8,"HttpRequest","","A trait describing an HTTP request that can be used to send multipart data.",null,null],[16,"Stream","","The HTTP stream type that can be opend by this request, to which the multipart data will be\nwritten.",5,null],[16,"Error","","The error type for this request.\nMust be compatible with `io::Error` as well as `Self::HttpStream::Error`",5,null],[10,"apply_headers","","Set the `Content-Type` header to `multipart/form-data` and supply the `boundary` value.\nIf `content_len` is given, set the `Content-Length` header to its value.",5,null],[10,"open_stream","","Open the request stream and return it or any error otherwise.",5,null],[8,"HttpStream","","A trait describing an open HTTP stream that can be written to.",null,null],[16,"Request","","The request type that opened this stream.",6,null],[16,"Response","","The response type that will be returned after the request is completed.",6,null],[16,"Error","","The error type for this stream.\nMust be compatible with `io::Error` as well as `Self::Request::Error`.",6,null],[10,"finish","","Finalize and close the stream and return the response object, or any error otherwise.",6,null],[11,"from_request","","Create a new `Multipart` to wrap a request.",7,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"write_text","","Write a text field to this multipart request.\n`name` and `val` can be either owned `String` or `&amp;str`.",7,null],[11,"write_file","","Open a file pointed to by `path` and write its contents to the multipart request,\nsupplying its filename and guessing its `Content-Type` from its extension.",7,null],[11,"write_stream","","Write a byte stream to the multipart request as a file field, supplying `filename` if given,\nand `content_type` if given or `&quot;application/octet-stream&quot;` if not.",7,null],[11,"send","","Finalize the request and return the response from the server, or the last error if set.",7,null],[11,"from_request_sized","","Create a new `Multipart` using the `SizedRequest` wrapper around `req`.",7,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"finish","std::io::util","",8,null],[0,"server","multipart","The server-side abstraction for multipart requests. Enabled with the `server` feature (on by\ndefault).",null,null],[3,"Multipart","multipart::server","The server-side implementation of `multipart/form-data` requests.",null,null],[3,"MultipartField","","A field in a multipart request. May be either text or a binary stream (file).",null,null],[12,"name","","The field&#39;s name from the form",9,null],[12,"data","","The data of the field. Can be text or binary.",9,null],[3,"MultipartFile","","A representation of a file in HTTP `multipart/form-data`.",null,null],[3,"Entries","","A result of `Multipart::save_all()`.",null,null],[12,"fields","","The text fields of the multipart request, mapped by field name -&gt; value.",10,null],[12,"files","","A map of file field names to their contents saved on the filesystem.",10,null],[12,"dir","","The directory the files in this request were saved under; may be temporary or permanent.",10,null],[3,"SavedFile","","A file saved to the local filesystem from a multipart request.",null,null],[12,"path","","The complete path this file was saved at.",11,null],[12,"filename","","The original filename of this file, if one was provided in the request.",11,null],[12,"size","","The number of bytes written to the disk; may be truncated.",11,null],[4,"SaveResult","","The result of [`Multipart::save_all()`](struct.multipart.html#method.save_all).",null,null],[13,"Full","","The operation was a total success. Contained are all entries of the request.",12,null],[13,"Partial","","The operation errored partway through. Contained are the entries gathered thus far,\nas well as the error that ended the process.",12,null],[13,"Error","","The `TempDir` for `Entries` could not be constructed. Contained is the error detailing the\nproblem.",12,null],[4,"MultipartData","","The data of a field in a `multipart/form-data` request.",null,null],[13,"Text","","The field&#39;s payload is a text string.",13,null],[13,"File","","The field&#39;s payload is a binary stream (file).",13,null],[4,"SaveDir","","The save directory for `Entries`. May be temporary (delete-on-drop) or permanent.",null,null],[13,"Temp","","This directory is temporary and will be deleted, along with its contents, when this wrapper\nis dropped.",14,null],[13,"Perm","","This directory is permanent and will be left on the filesystem when this wrapper is dropped.",14,null],[0,"hyper","","Server-side integration with [Hyper](https://github.com/hyperium/hyper).\nEnabled with the `hyper` feature (on by default).",null,null],[11,"new","hyper::server::request","Create a new Request, reading the StartLine and Headers so they are\nimmediately useful.",15,{"inputs":[{"name":"bufreader"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"set_read_timeout","","Set the read timeout of the underlying NetworkStream.",15,null],[11,"downcast_ref","","Get a reference to the underlying `NetworkStream`.",15,null],[11,"ssl","","Get a reference to the underlying Ssl stream, if connected\nover HTTPS.",15,null],[11,"deconstruct","","Deconstruct a Request into its constituent parts.",15,null],[11,"fmt","hyper::client::pool","",16,null],[11,"default","","",16,{"inputs":[],"output":{"name":"config"}}],[11,"new","","Creates a `Pool` with a `DefaultConnector`.",17,{"inputs":[{"name":"config"}],"output":{"name":"pool"}}],[11,"with_connector","","Creates a `Pool` with a specified `NetworkConnector`.",17,{"inputs":[{"name":"config"},{"name":"c"}],"output":{"name":"pool"}}],[11,"clear_idle","","Clear all idle connections from the Pool, closing them.",17,null],[11,"connect","","",17,null],[11,"read","","",18,null],[11,"write","","",18,null],[11,"flush","","",18,null],[11,"peer_addr","","",18,null],[11,"set_read_timeout","","",18,null],[11,"set_write_timeout","","",18,null],[11,"close","","",18,null],[11,"set_previous_response_expected_no_content","","",18,null],[11,"previous_response_expected_no_content","","",18,null],[11,"drop","","",18,null],[11,"headers","hyper::client::request","Read the Request headers.",0,null],[11,"method","","Read the Request method.",0,null],[11,"set_write_timeout","","Set the write timeout.",0,null],[11,"set_read_timeout","","Set the read timeout.",0,null],[11,"with_message","","Create a new `Request&lt;Fresh&gt;` that will use the given `HttpMessage` for its communication\nwith the server. This implies that the given `HttpMessage` instance has already been\nproperly initialized by the caller (e.g. a TCP connection&#39;s already established).",0,{"inputs":[{"name":"method"},{"name":"url"},{"name":"box"}],"output":{"name":"result"}}],[11,"new","","Create a new client request.",0,{"inputs":[{"name":"method"},{"name":"url"}],"output":{"name":"result"}}],[11,"with_connector","","Create a new client request with a specific underlying NetworkStream.",0,{"inputs":[{"name":"method"},{"name":"url"},{"name":"c"}],"output":{"name":"result"}}],[11,"start","","Consume a Fresh Request, writing the headers and method,\nreturning a Streaming Request.",0,null],[11,"headers_mut","","Get a mutable reference to the Request headers.",0,null],[11,"send","","Completes writing the request, and returns a response to read from.",0,null],[11,"write","","",0,null],[11,"flush","","",0,null],[11,"fmt","hyper::client::response","",19,null],[11,"new","","Creates a new response from a server.",19,{"inputs":[{"name":"url"},{"name":"box"}],"output":{"name":"result"}}],[11,"with_message","","Creates a new response received from the server on the given `HttpMessage`.",19,{"inputs":[{"name":"url"},{"name":"box"}],"output":{"name":"result"}}],[11,"status_raw","","Get the raw status code and reason.",19,null],[11,"read","","",19,null],[11,"drop","","",19,null],[11,"fmt","hyper::client","",20,null],[11,"new","","Create a new Client.",20,{"inputs":[],"output":{"name":"client"}}],[11,"with_pool_config","","Create a new Client with a configured Pool Config.",20,{"inputs":[{"name":"config"}],"output":{"name":"client"}}],[11,"with_connector","","Create a new client with a specific connector.",20,{"inputs":[{"name":"c"}],"output":{"name":"client"}}],[11,"with_protocol","","Create a new client with a specific `Protocol`.",20,{"inputs":[{"name":"p"}],"output":{"name":"client"}}],[11,"set_redirect_policy","","Set the RedirectPolicy.",20,null],[11,"set_read_timeout","","Set the read timeout value for all requests.",20,null],[11,"set_write_timeout","","Set the write timeout value for all requests.",20,null],[11,"get","","Build a Get request.",20,null],[11,"head","","Build a Head request.",20,null],[11,"patch","","Build a Patch request.",20,null],[11,"post","","Build a Post request.",20,null],[11,"put","","Build a Put request.",20,null],[11,"delete","","Build a Delete request.",20,null],[11,"request","","Build a new request using this Client.",20,null],[11,"default","","",20,{"inputs":[],"output":{"name":"client"}}],[11,"body","","Set a request body to be sent.",21,null],[11,"headers","","Add additional headers to the request.",21,null],[11,"header","","Add an individual new header to the request.",21,null],[11,"send","","Execute this request and receive a Response back.",21,null],[11,"read","","",22,null],[11,"from","","",22,{"inputs":[{"name":"r"}],"output":{"name":"body"}}],[11,"into_url","url","",23,null],[11,"fmt","hyper::client","",24,null],[11,"clone","","",24,null],[11,"default","","",24,{"inputs":[],"output":{"name":"redirectpolicy"}}],[11,"fmt","hyper::error","",25,null],[11,"fmt","","",25,null],[11,"description","","",25,null],[11,"cause","","",25,null],[11,"from","","",25,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",25,{"inputs":[{"name":"parseerror"}],"output":{"name":"error"}}],[11,"from","","",25,{"inputs":[{"name":"sslerror"}],"output":{"name":"error"}}],[11,"from","","",25,{"inputs":[{"name":"utf8error"}],"output":{"name":"error"}}],[11,"from","","",25,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"error"}}],[11,"from","","",25,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",25,{"inputs":[{"name":"httperror"}],"output":{"name":"error"}}],[11,"fmt","hyper::method","",26,null],[11,"hash","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"clone","","",26,null],[11,"as_ref","","",26,null],[11,"safe","","Whether a method is considered &quot;safe&quot;, meaning the request is\nessentially read-only.",26,null],[11,"idempotent","","Whether a method is considered &quot;idempotent&quot;, meaning the request has\nthe same result is executed multiple times.",26,null],[11,"from_str","","",26,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",26,null],[11,"eq","hyper::header::common::accept","",27,null],[11,"ne","","",27,null],[11,"fmt","","",27,null],[11,"clone","","",27,null],[11,"new","collections::vec","Constructs a new, empty `Vec&lt;T&gt;`.",28,{"inputs":[],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec&lt;T&gt;` with the specified capacity.",28,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec&lt;T&gt;` directly from the raw components of another vector.",28,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",28,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec&lt;T&gt;`. The collection may reserve more space to avoid\nfrequent reallocations.",28,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec&lt;T&gt;`. Does nothing if the capacity is already\nsufficient.",28,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",28,null],[11,"into_boxed_slice","","Converts the vector into Box&lt;[T]&gt;.",28,null],[11,"truncate","","Shorten a vector to be `len` elements long, dropping excess elements.",28,null],[11,"as_slice","","Extracts a slice containing the entire vector.",28,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",28,null],[11,"set_len","","Sets the length of a vector.",28,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",28,null],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after it to the right.",28,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after it to the left.",28,null],[11,"retain","","Retains only the elements specified by the predicate.",28,null],[11,"push","","Appends an element to the back of a collection.",28,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it\nis empty.",28,null],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",28,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items.",28,null],[11,"clear","","Clears the vector, removing all values.",28,null],[11,"len","","Returns the number of elements in the vector.",28,null],[11,"is_empty","","Returns `true` if the vector contains no elements.",28,null],[11,"split_off","","Splits the collection into two at the given index.",28,null],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",28,null],[11,"extend_from_slice","","Appends all elements in a slice to the `Vec`.",28,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",28,null],[11,"clone","collections::binary_heap","",29,null],[11,"clone_from","","",29,null],[11,"default","","",29,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"fmt","","",29,null],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",29,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",29,{"inputs":[{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",29,null],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",29,null],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",29,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",29,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",29,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",29,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",29,null],[11,"push","","Pushes an item onto the binary heap.",29,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",29,null],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",29,null],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",29,null],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",29,null],[11,"len","","Returns the length of the binary heap.",29,null],[11,"is_empty","","Checks if the binary heap is empty.",29,null],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",29,null],[11,"clear","","Drops all items from the binary heap.",29,null],[11,"append","","Moves all the elements of `other` into `self`, leaving `other` empty.",29,null],[11,"clone","","",30,null],[11,"next","","",30,null],[11,"size_hint","","",30,null],[11,"next_back","","",30,null],[11,"clone","","",31,null],[11,"next","","",31,null],[11,"size_hint","","",31,null],[11,"next_back","","",31,null],[11,"next","","",32,null],[11,"size_hint","","",32,null],[11,"next_back","","",32,null],[11,"from","","",29,{"inputs":[{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"from","collections::vec","",28,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"from_iter","collections::binary_heap","",29,{"inputs":[{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",29,null],[11,"extend","","",29,null],[11,"extend","","",29,null],[11,"drop","collections::btree::map","",33,null],[11,"clone","","",33,null],[11,"new","","Makes a new empty BTreeMap with a reasonable choice for B.",33,{"inputs":[],"output":{"name":"btreemap"}}],[11,"clear","","Clears the map, removing all values.",33,null],[11,"get","","Returns a reference to the value corresponding to the key.",33,null],[11,"contains_key","","Returns true if the map contains a value for the specified key.",33,null],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",33,null],[11,"insert","","Inserts a key-value pair into the map.",33,null],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",33,null],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",33,null],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",33,null],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",33,null],[11,"entry","","Gets the given key&#39;s corresponding entry in the map for in-place manipulation.",33,null],[11,"next","","",34,null],[11,"size_hint","","",34,null],[11,"next_back","","",34,null],[11,"len","","",34,null],[11,"clone","","",34,null],[11,"next","","",35,null],[11,"size_hint","","",35,null],[11,"next_back","","",35,null],[11,"len","","",35,null],[11,"into_iter","","",33,null],[11,"drop","","",36,null],[11,"next","","",36,null],[11,"size_hint","","",36,null],[11,"next_back","","",36,null],[11,"len","","",36,null],[11,"next","","",37,null],[11,"size_hint","","",37,null],[11,"next_back","","",37,null],[11,"len","","",37,null],[11,"clone","","",37,null],[11,"next","","",38,null],[11,"size_hint","","",38,null],[11,"next_back","","",38,null],[11,"len","","",38,null],[11,"clone","","",38,null],[11,"next","","",39,null],[11,"next","","",40,null],[11,"size_hint","","",40,null],[11,"next_back","","",40,null],[11,"len","","",40,null],[11,"next_back","","",39,null],[11,"clone","","",39,null],[11,"next","","",41,null],[11,"next_back","","",41,null],[11,"from_iter","","",33,{"inputs":[{"name":"t"}],"output":{"name":"btreemap"}}],[11,"extend","","",33,null],[11,"extend","","",33,null],[11,"hash","","",33,null],[11,"default","","",33,{"inputs":[],"output":{"name":"btreemap"}}],[11,"eq","","",33,null],[11,"partial_cmp","","",33,null],[11,"cmp","","",33,null],[11,"fmt","","",33,null],[11,"index","","",33,null],[11,"iter","","Gets an iterator over the entries of the map, sorted by key.",33,null],[11,"iter_mut","","Gets a mutable iterator over the entries of the map, sorted by key.",33,null],[11,"keys","","Gets an iterator over the keys of the map, in sorted order.",33,null],[11,"values","","Gets an iterator over the values of the map, in order by key.",33,null],[11,"values_mut","","Gets a mutable iterator over the values of the map, in order by key.",33,null],[11,"len","","Returns the number of elements in the map.",33,null],[11,"is_empty","","Returns true if the map contains no elements.",33,null],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",42,null],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",42,null],[11,"key","","Returns a reference to this entry&#39;s key.",42,null],[11,"key","","Gets a reference to the key that would be used when inserting a value\nthrough the VacantEntry.",43,null],[11,"insert","","Sets the value of the entry with the VacantEntry&#39;s key,\nand returns a mutable reference to it.",43,null],[11,"key","","Gets a reference to the key in the entry.",44,null],[11,"get","","Gets a reference to the value in the entry.",44,null],[11,"get_mut","","Gets a mutable reference to the value in the entry.",44,null],[11,"into_mut","","Converts the entry into a mutable reference to its value.",44,null],[11,"insert","","Sets the value of the entry with the OccupiedEntry&#39;s key,\nand returns the entry&#39;s old value.",44,null],[11,"remove","","Takes the value of the entry out of the map, and returns it.",44,null],[11,"partial_cmp","collections::btree::set","",45,null],[11,"lt","","",45,null],[11,"le","","",45,null],[11,"gt","","",45,null],[11,"ge","","",45,null],[11,"cmp","","",45,null],[11,"eq","","",45,null],[11,"ne","","",45,null],[11,"hash","","",45,null],[11,"clone","","",45,null],[11,"new","","Makes a new BTreeSet with a reasonable choice of B.",45,{"inputs":[],"output":{"name":"btreeset"}}],[11,"iter","","Gets an iterator over the BTreeSet&#39;s contents.",45,null],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",45,null],[11,"difference","","Visits the values representing the difference, in ascending order.",45,null],[11,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",45,null],[11,"intersection","","Visits the values representing the intersection, in ascending order.",45,null],[11,"union","","Visits the values representing the union, in ascending order.",45,null],[11,"len","","Returns the number of elements in the set.",45,null],[11,"is_empty","","Returns true if the set contains no elements.",45,null],[11,"clear","","Clears the set, removing all values.",45,null],[11,"contains","","Returns `true` if the set contains a value.",45,null],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",45,null],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",45,null],[11,"is_subset","","Returns `true` if the set is a subset of another.",45,null],[11,"is_superset","","Returns `true` if the set is a superset of another.",45,null],[11,"insert","","Adds a value to the set.",45,null],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",45,null],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",45,null],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",45,null],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",45,null],[11,"from_iter","","",45,{"inputs":[{"name":"i"}],"output":{"name":"btreeset"}}],[11,"into_iter","","Gets an iterator for moving out the BtreeSet&#39;s contents.",45,null],[11,"extend","","",45,null],[11,"extend","","",45,null],[11,"default","","",45,{"inputs":[],"output":{"name":"btreeset"}}],[11,"fmt","","",45,null],[11,"clone","","",46,null],[11,"next","","",46,null],[11,"size_hint","","",46,null],[11,"next_back","","",46,null],[11,"len","","",46,null],[11,"next","","",47,null],[11,"size_hint","","",47,null],[11,"next_back","","",47,null],[11,"len","","",47,null],[11,"clone","","",48,null],[11,"next","","",48,null],[11,"next_back","","",48,null],[11,"clone","","",49,null],[11,"next","","",49,null],[11,"size_hint","","",49,null],[11,"clone","","",50,null],[11,"next","","",50,null],[11,"size_hint","","",50,null],[11,"clone","","",51,null],[11,"next","","",51,null],[11,"size_hint","","",51,null],[11,"clone","","",52,null],[11,"next","","",52,null],[11,"size_hint","","",52,null],[11,"borrow","collections::borrow","",53,null],[11,"clone","","",53,null],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",53,null],[11,"into_owned","","Extracts the owned data.",53,null],[11,"deref","","",53,null],[11,"cmp","","",53,null],[11,"eq","","",53,null],[11,"partial_cmp","","",53,null],[11,"fmt","","",53,null],[11,"fmt","","",53,null],[11,"hash","","",53,null],[11,"as_ref","","",53,null],[11,"hash","collections::enum_set","",54,null],[11,"cmp","","",54,null],[11,"partial_cmp","","",54,null],[11,"lt","","",54,null],[11,"le","","",54,null],[11,"gt","","",54,null],[11,"ge","","",54,null],[11,"eq","","",54,null],[11,"ne","","",54,null],[11,"clone","","",54,null],[11,"fmt","","",54,null],[11,"new","","Returns an empty `EnumSet`.",54,{"inputs":[],"output":{"name":"enumset"}}],[11,"len","","Returns the number of elements in the given `EnumSet`.",54,null],[11,"is_empty","","Returns true if the `EnumSet` is empty.",54,null],[11,"clear","","",54,null],[11,"is_disjoint","","Returns `false` if the `EnumSet` contains any enum of the given `EnumSet`.",54,null],[11,"is_superset","","Returns `true` if a given `EnumSet` is included in this `EnumSet`.",54,null],[11,"is_subset","","Returns `true` if this `EnumSet` is included in the given `EnumSet`.",54,null],[11,"union","","Returns the union of both `EnumSets`.",54,null],[11,"intersection","","Returns the intersection of both `EnumSets`.",54,null],[11,"insert","","Adds an enum to the `EnumSet`, and returns `true` if it wasn&#39;t there before",54,null],[11,"remove","","Removes an enum from the EnumSet",54,null],[11,"contains","","Returns `true` if an `EnumSet` contains a given enum.",54,null],[11,"iter","","Returns an iterator over an `EnumSet`.",54,null],[11,"sub","","",54,null],[11,"bitor","","",54,null],[11,"bitand","","",54,null],[11,"bitxor","","",54,null],[11,"clone","","",55,null],[11,"next","","",55,null],[11,"size_hint","","",55,null],[11,"from_iter","","",54,{"inputs":[{"name":"i"}],"output":{"name":"enumset"}}],[11,"extend","","",54,null],[11,"extend","","",54,null],[11,"clone","collections::linked_list","",56,null],[11,"clone","","",57,null],[11,"default","","",58,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"new","","Creates an empty `LinkedList`.",58,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",58,null],[11,"iter","","Provides a forward iterator.",58,null],[11,"iter_mut","","Provides a forward iterator with mutable references.",58,null],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",58,null],[11,"len","","Returns the length of the `LinkedList`.",58,null],[11,"clear","","Removes all elements from the `LinkedList`.",58,null],[11,"contains","","Returns `true` if the `LinkedList` contains an element equal to the\ngiven value.",58,null],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",58,null],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",58,null],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",58,null],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",58,null],[11,"push_front","","Adds an element first in the list.",58,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",58,null],[11,"push_back","","Appends an element to the back of a list",58,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",58,null],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",58,null],[11,"front_place","","Returns a place for insertion at the front of the list.",58,null],[11,"back_place","","Returns a place for insertion at the back of the list.",58,null],[11,"drop","","",58,null],[11,"next","","",56,null],[11,"size_hint","","",56,null],[11,"next_back","","",56,null],[11,"next","","",59,null],[11,"size_hint","","",59,null],[11,"next_back","","",59,null],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",59,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",59,null],[11,"next","","",57,null],[11,"size_hint","","",57,null],[11,"next_back","","",57,null],[11,"from_iter","","",58,{"inputs":[{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",58,null],[11,"extend","","",58,null],[11,"extend","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"partial_cmp","","",58,null],[11,"cmp","","",58,null],[11,"clone","","",58,null],[11,"fmt","","",58,null],[11,"hash","","",58,null],[11,"make_place","","",60,null],[11,"pointer","","",60,null],[11,"finalize","","",60,null],[11,"make_place","","",61,null],[11,"pointer","","",61,null],[11,"finalize","","",61,null],[11,"start","core::ops","",62,null],[11,"end","","",63,null],[11,"start","","",64,null],[11,"end","","",64,null],[11,"borrow","collections::vec","",28,null],[11,"borrow_mut","","",28,null],[11,"clone","collections::str","",65,null],[11,"next","","",65,null],[11,"size_hint","","",65,null],[11,"borrow","collections::string","",66,null],[11,"fmt","core::str::pattern","",67,null],[11,"eq","","",67,null],[11,"ne","","",67,null],[11,"clone","","",67,null],[11,"fmt","","",68,null],[11,"clone","","",68,null],[11,"haystack","","",68,null],[11,"next","","",68,null],[11,"next_match","","",68,null],[11,"next_reject","","",68,null],[11,"next_back","","",68,null],[11,"next_match_back","","",68,null],[11,"next_reject_back","","",68,null],[11,"fmt","","",69,null],[11,"clone","","",69,null],[11,"haystack","","",69,null],[11,"next","","",69,null],[11,"next_match","","",69,null],[11,"next_reject","","",69,null],[11,"next_back","","",69,null],[11,"next_match_back","","",69,null],[11,"next_reject_back","","",69,null],[11,"clone","","",70,null],[11,"fmt","","",70,null],[11,"haystack","","",70,null],[11,"next","","",70,null],[11,"next_match","","",70,null],[11,"next_reject","","",70,null],[11,"next_back","","",70,null],[11,"next_match_back","","",70,null],[11,"next_reject_back","","",70,null],[11,"fmt","","",71,null],[11,"clone","","",71,null],[11,"haystack","","",71,null],[11,"next","","",71,null],[11,"next_match","","",71,null],[11,"next_back","","",71,null],[11,"next_match_back","","",71,null],[11,"cmp","collections::string","",66,null],[11,"partial_cmp","","",66,null],[11,"lt","","",66,null],[11,"le","","",66,null],[11,"gt","","",66,null],[11,"ge","","",66,null],[11,"fmt","","",72,null],[11,"fmt","","",73,null],[11,"new","","Creates a new empty `String`.",66,{"inputs":[],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",66,{"inputs":[{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",66,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a string, including invalid characters.",66,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `Err`\nif `v` contains any invalid data.",66,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",66,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",66,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the\nstring contains valid UTF-8.",66,{"inputs":[{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Converts a `String` into a byte vector.",66,null],[11,"as_str","","Extracts a string slice containing the entire string.",66,null],[11,"as_mut_str","","Extracts a string slice containing the entire string.",66,null],[11,"push_str","","Appends a given string slice onto the end of this `String`.",66,null],[11,"capacity","","Returns this `String`&#39;s capacity, in bytes.",66,null],[11,"reserve","","Ensures that this `String`&#39;s capacity is at least `additional` bytes\nlarger than its length.",66,null],[11,"reserve_exact","","Ensures that this `String`&#39;s capacity is `additional` bytes\nlarger than its length.",66,null],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",66,null],[11,"push","","Appends the given `char` to the end of this `String`.",66,null],[11,"as_bytes","","Returns a byte slice of this `String`&#39;s contents.",66,null],[11,"truncate","","Shortens this `String` to the specified length.",66,null],[11,"pop","","Removes the last character from the string buffer and returns it.",66,null],[11,"remove","","Removes a `char` from this `String` at a byte position and returns it.",66,null],[11,"insert","","Inserts a character into this `String` at a byte position.",66,null],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",66,null],[11,"len","","Returns the length of this `String`, in bytes.",66,null],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",66,null],[11,"clear","","Truncates this `String`, removing all contents.",66,null],[11,"drain","","Create a draining iterator that removes the specified range in the string\nand yields the removed chars.",66,null],[11,"into_boxed_str","","Converts this `String` into a `Box&lt;str&gt;`.",66,null],[11,"into_bytes","","Returns the bytes that were attempted to convert to a `String`.",72,null],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the conversion failure.",72,null],[11,"fmt","","",72,null],[11,"fmt","","",73,null],[11,"clone","","",66,null],[11,"clone_from","","",66,null],[11,"from_iter","","",66,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",66,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",66,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"extend","","",66,null],[11,"extend","","",66,null],[11,"extend","","",66,null],[11,"extend","","",66,null],[11,"eq","","",66,null],[11,"ne","","",66,null],[11,"eq","","",66,null],[11,"ne","","",66,null],[11,"eq","","",66,null],[11,"ne","","",66,null],[11,"eq","collections::borrow","",53,null],[11,"ne","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"eq","collections::string","",66,null],[11,"ne","","",66,null],[11,"default","","",66,{"inputs":[],"output":{"name":"string"}}],[11,"fmt","","",66,null],[11,"fmt","","",66,null],[11,"hash","","",66,null],[11,"add","","",66,null],[11,"index","","",66,null],[11,"index","","",66,null],[11,"index","","",66,null],[11,"index","","",66,null],[11,"index","","",66,null],[11,"index","","",66,null],[11,"index_mut","","",66,null],[11,"index_mut","","",66,null],[11,"index_mut","","",66,null],[11,"index_mut","","",66,null],[11,"index_mut","","",66,null],[11,"index_mut","","",66,null],[11,"deref","","",66,null],[11,"deref_mut","","",66,null],[11,"from_str","","",66,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",74,null],[11,"fmt","","",74,null],[11,"fmt","","",74,null],[11,"eq","","",74,null],[11,"as_ref","","",66,null],[11,"as_ref","","",66,null],[11,"from","","",66,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"from","collections::borrow","",53,{"inputs":[{"name":"str"}],"output":{"name":"cow"}}],[11,"from","","",53,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"into","collections::string","",66,null],[11,"write_str","","",66,null],[11,"write_char","","",66,null],[11,"drop","","",75,null],[11,"next","","",75,null],[11,"size_hint","","",75,null],[11,"next_back","","",75,null],[11,"clone","collections::vec","",28,null],[11,"clone_from","","",28,null],[11,"hash","","",28,null],[11,"index","","",28,null],[11,"index_mut","","",28,null],[11,"index","","",28,null],[11,"index","","",28,null],[11,"index","","",28,null],[11,"index","","",28,null],[11,"index","","",28,null],[11,"index","","",28,null],[11,"index_mut","","",28,null],[11,"index_mut","","",28,null],[11,"index_mut","","",28,null],[11,"index_mut","","",28,null],[11,"index_mut","","",28,null],[11,"index_mut","","",28,null],[11,"deref","","",28,null],[11,"deref_mut","","",28,null],[11,"from_iter","","",28,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",28,null],[11,"extend","","",28,null],[11,"extend","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"eq","collections::borrow","",53,null],[11,"ne","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"eq","collections::vec","",28,null],[11,"ne","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"partial_cmp","","",28,null],[11,"cmp","","",28,null],[11,"drop","","",28,null],[11,"default","","",28,{"inputs":[],"output":{"name":"vec"}}],[11,"fmt","","",28,null],[11,"as_ref","","",28,null],[11,"as_mut","","",28,null],[11,"as_ref","","",28,null],[11,"as_mut","","",28,null],[11,"from","","",28,null],[11,"from","","",28,{"inputs":[{"name":"str"}],"output":{"name":"vec"}}],[11,"from","collections::borrow","",53,null],[11,"from","","",53,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"from_iter","","",53,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"next","collections::vec","",76,null],[11,"size_hint","","",76,null],[11,"count","","",76,null],[11,"next_back","","",76,null],[11,"clone","","",76,null],[11,"drop","","",76,null],[11,"next","","",77,null],[11,"size_hint","","",77,null],[11,"next_back","","",77,null],[11,"drop","","",77,null],[11,"clone","collections::vec_deque","",78,null],[11,"drop","","",78,null],[11,"default","","",78,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"new","","Creates an empty `VecDeque`.",78,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",78,{"inputs":[{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",78,null],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",78,null],[11,"swap","","Swaps elements at indices `i` and `j`.",78,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",78,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",78,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`VecDeque`. The collection may reserve more space to avoid frequent reallocations.",78,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",78,null],[11,"truncate","","Shortens a `VecDeque`, dropping excess elements from the back.",78,null],[11,"iter","","Returns a front-to-back iterator.",78,null],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",78,null],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",78,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",78,null],[11,"len","","Returns the number of elements in the `VecDeque`.",78,null],[11,"is_empty","","Returns true if the buffer contains no elements",78,null],[11,"drain","","Create a draining iterator that removes the specified range in the\n`VecDeque` and yields the removed items.",78,null],[11,"clear","","Clears the buffer, removing all values.",78,null],[11,"contains","","Returns `true` if the `VecDeque` contains an element equal to the\ngiven value.",78,null],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",78,null],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",78,null],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",78,null],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",78,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",78,null],[11,"push_front","","Inserts an element first in the sequence.",78,null],[11,"push_back","","Appends an element to the back of a buffer",78,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",78,null],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\nlast element.",78,null],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it,\nreplacing it with the first element.",78,null],[11,"insert","","Inserts an element at `index` within the `VecDeque`. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",78,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `index` is out of bounds.",78,null],[11,"split_off","","Splits the collection into two at the given index.",78,null],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",78,null],[11,"retain","","Retains only the elements specified by the predicate.",78,null],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",78,null],[11,"clone","","",79,null],[11,"next","","",79,null],[11,"size_hint","","",79,null],[11,"next_back","","",79,null],[11,"next","","",80,null],[11,"size_hint","","",80,null],[11,"next_back","","",80,null],[11,"clone","","",81,null],[11,"next","","",81,null],[11,"size_hint","","",81,null],[11,"next_back","","",81,null],[11,"drop","","",82,null],[11,"next","","",82,null],[11,"size_hint","","",82,null],[11,"next_back","","",82,null],[11,"eq","","",78,null],[11,"partial_cmp","","",78,null],[11,"cmp","","",78,null],[11,"hash","","",78,null],[11,"index","","",78,null],[11,"index_mut","","",78,null],[11,"from_iter","","",78,{"inputs":[{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by\nvalue.",78,null],[11,"extend","","",78,null],[11,"extend","","",78,null],[11,"fmt","","",78,null],[11,"from","","",78,{"inputs":[{"name":"vec"}],"output":{"name":"vecdeque"}}],[11,"from","collections::vec","",28,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vec"}}],[11,"eq","collections","",83,null],[11,"ne","","",83,null],[11,"hash","","",83,null],[11,"fmt","","",83,null],[11,"clone","","",83,null],[11,"clone","alloc::boxed","",84,null],[11,"pointer","","",85,null],[11,"make_place","","",85,{"inputs":[],"output":{"name":"intermediatebox"}}],[11,"finalize","","",85,null],[11,"finalize","","",86,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",84,null],[11,"drop","","",85,null],[11,"new","","Allocates memory on the heap and then places `x` into it.",86,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from a raw pointer.",86,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",86,null],[11,"default","","",86,{"inputs":[],"output":{"name":"box"}}],[11,"default","","",86,{"inputs":[],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box&#39;s contents.",86,null],[11,"clone_from","","Copies `source`&#39;s contents into `self` without creating a new allocation.",86,null],[11,"clone","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"partial_cmp","","",86,null],[11,"lt","","",86,null],[11,"le","","",86,null],[11,"ge","","",86,null],[11,"gt","","",86,null],[11,"cmp","","",86,null],[11,"hash","","",86,null],[11,"from","","",86,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",86,null],[11,"downcast","","Attempt to downcast the box to a concrete type.",86,null],[11,"fmt","","",86,null],[11,"fmt","","",86,null],[11,"fmt","","",86,null],[11,"deref","","",86,null],[11,"deref_mut","","",86,null],[11,"next","","",86,null],[11,"size_hint","","",86,null],[11,"next_back","","",86,null],[11,"call_once","","",86,null],[11,"call_once","","",86,null],[11,"clone","","",86,null],[11,"borrow","","",86,null],[11,"borrow_mut","","",86,null],[11,"as_ref","","",86,null],[11,"as_mut","","",86,null],[11,"deref","hyper::header::common::accept","",27,null],[11,"deref_mut","","",27,null],[11,"header_name","","",27,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",27,null],[11,"fmt_header","","",27,null],[11,"fmt","","",27,null],[11,"fmt","hyper::header::common::access_control_allow_credentials","",87,null],[11,"eq","","",87,null],[11,"clone","","",87,null],[11,"header_name","","",87,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",87,null],[11,"fmt_header","","",87,null],[11,"fmt","","",87,null],[11,"eq","hyper::header::common::access_control_allow_headers","",88,null],[11,"ne","","",88,null],[11,"fmt","","",88,null],[11,"clone","","",88,null],[11,"deref","","",88,null],[11,"deref_mut","","",88,null],[11,"header_name","","",88,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",88,null],[11,"fmt_header","","",88,null],[11,"fmt","","",88,null],[11,"eq","hyper::header::common::access_control_allow_methods","",89,null],[11,"ne","","",89,null],[11,"fmt","","",89,null],[11,"clone","","",89,null],[11,"deref","","",89,null],[11,"deref_mut","","",89,null],[11,"header_name","","",89,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",89,null],[11,"fmt_header","","",89,null],[11,"fmt","","",89,null],[11,"fmt","hyper::header::common::access_control_allow_origin","",90,null],[11,"eq","","",90,null],[11,"ne","","",90,null],[11,"clone","","",90,null],[11,"header_name","","",90,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",90,null],[11,"fmt_header","","",90,null],[11,"fmt","","",90,null],[11,"eq","hyper::header::common::access_control_expose_headers","",91,null],[11,"ne","","",91,null],[11,"fmt","","",91,null],[11,"clone","","",91,null],[11,"deref","","",91,null],[11,"deref_mut","","",91,null],[11,"header_name","","",91,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",91,null],[11,"fmt_header","","",91,null],[11,"fmt","","",91,null],[11,"eq","hyper::header::common::access_control_max_age","",92,null],[11,"ne","","",92,null],[11,"fmt","","",92,null],[11,"clone","","",92,null],[11,"deref","","",92,null],[11,"deref_mut","","",92,null],[11,"header_name","","",92,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",92,null],[11,"fmt_header","","",92,null],[11,"fmt","","",92,null],[11,"eq","hyper::header::common::access_control_request_headers","",93,null],[11,"ne","","",93,null],[11,"fmt","","",93,null],[11,"clone","","",93,null],[11,"deref","","",93,null],[11,"deref_mut","","",93,null],[11,"header_name","","",93,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",93,null],[11,"fmt_header","","",93,null],[11,"fmt","","",93,null],[11,"eq","hyper::header::common::access_control_request_method","",94,null],[11,"ne","","",94,null],[11,"fmt","","",94,null],[11,"clone","","",94,null],[11,"deref","","",94,null],[11,"deref_mut","","",94,null],[11,"header_name","","",94,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",94,null],[11,"fmt_header","","",94,null],[11,"fmt","","",94,null],[11,"eq","hyper::header::common::accept_charset","",95,null],[11,"ne","","",95,null],[11,"fmt","","",95,null],[11,"clone","","",95,null],[11,"deref","","",95,null],[11,"deref_mut","","",95,null],[11,"header_name","","",95,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",95,null],[11,"fmt_header","","",95,null],[11,"fmt","","",95,null],[11,"eq","hyper::header::common::accept_encoding","",96,null],[11,"ne","","",96,null],[11,"fmt","","",96,null],[11,"clone","","",96,null],[11,"deref","","",96,null],[11,"deref_mut","","",96,null],[11,"header_name","","",96,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",96,null],[11,"fmt_header","","",96,null],[11,"fmt","","",96,null],[11,"eq","hyper::header::common::accept_language","",97,null],[11,"ne","","",97,null],[11,"fmt","","",97,null],[11,"clone","","",97,null],[11,"deref","","",97,null],[11,"deref_mut","","",97,null],[11,"header_name","","",97,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",97,null],[11,"fmt_header","","",97,null],[11,"fmt","","",97,null],[11,"eq","hyper::header::common::accept_ranges","",98,null],[11,"ne","","",98,null],[11,"fmt","","",98,null],[11,"clone","","",98,null],[11,"deref","","",98,null],[11,"deref_mut","","",98,null],[11,"header_name","","",98,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",98,null],[11,"fmt_header","","",98,null],[11,"fmt","","",98,null],[11,"eq","","",99,null],[11,"ne","","",99,null],[11,"fmt","","",99,null],[11,"clone","","",99,null],[11,"from_str","","",99,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",99,null],[11,"eq","hyper::header::common::allow","",100,null],[11,"ne","","",100,null],[11,"fmt","","",100,null],[11,"clone","","",100,null],[11,"deref","","",100,null],[11,"deref_mut","","",100,null],[11,"header_name","","",100,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",100,null],[11,"fmt_header","","",100,null],[11,"fmt","","",100,null],[11,"fmt","hyper::header::common::authorization","",101,null],[11,"eq","","",101,null],[11,"ne","","",101,null],[11,"clone","","",101,null],[11,"deref","","",101,null],[11,"deref_mut","","",101,null],[11,"header_name","","",101,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",101,null],[11,"fmt_header","","",101,null],[11,"scheme","collections::string","",66,{"inputs":[],"output":{"name":"option"}}],[11,"fmt_scheme","","",66,null],[11,"fmt","hyper::header::common::authorization","",102,null],[11,"eq","","",102,null],[11,"ne","","",102,null],[11,"clone","","",102,null],[11,"scheme","","",102,{"inputs":[],"output":{"name":"option"}}],[11,"fmt_scheme","","",102,null],[11,"from_str","","",102,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"clone","","",103,null],[11,"scheme","","",103,{"inputs":[],"output":{"name":"option"}}],[11,"fmt_scheme","","",103,null],[11,"from_str","","",103,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","hyper::header::common::cache_control","",104,null],[11,"clone","","",104,null],[11,"eq","","",104,null],[11,"ne","","",104,null],[11,"deref","","",104,null],[11,"deref_mut","","",104,null],[11,"header_name","","",104,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",104,null],[11,"fmt_header","","",104,null],[11,"fmt","","",105,null],[11,"clone","","",105,null],[11,"eq","","",105,null],[11,"ne","","",105,null],[11,"fmt","","",105,null],[11,"from_str","","",105,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","hyper::header::common::cookie","",106,null],[11,"eq","","",106,null],[11,"ne","","",106,null],[11,"clone","","",106,null],[11,"deref","","",106,null],[11,"deref_mut","","",106,null],[11,"header_name","","",106,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",106,null],[11,"fmt_header","","",106,null],[11,"to_cookie_jar","","This method can be used to create CookieJar that can be used\nto manipulate cookies and create a corresponding `SetCookie` header afterwards.",106,null],[11,"from_cookie_jar","","Extracts all cookies from `CookieJar` and creates Cookie header.\nUseful for clients.",106,{"inputs":[{"name":"cookiejar"}],"output":{"name":"cookie"}}],[11,"fmt","hyper::header::common::connection","",107,null],[11,"eq","","",107,null],[11,"ne","","",107,null],[11,"clone","","",107,null],[11,"from_str","","",107,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",107,null],[11,"eq","","",108,null],[11,"ne","","",108,null],[11,"fmt","","",108,null],[11,"clone","","",108,null],[11,"deref","","",108,null],[11,"deref_mut","","",108,null],[11,"header_name","","",108,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",108,null],[11,"fmt_header","","",108,null],[11,"fmt","","",108,null],[11,"close","","A constructor to easily create a `Connection: close` header.",108,{"inputs":[],"output":{"name":"connection"}}],[11,"keep_alive","","A constructor to easily create a `Connection: keep-alive` header.",108,{"inputs":[],"output":{"name":"connection"}}],[11,"eq","hyper::header::common::content_disposition","",109,null],[11,"ne","","",109,null],[11,"fmt","","",109,null],[11,"clone","","",109,null],[11,"eq","","",110,null],[11,"ne","","",110,null],[11,"fmt","","",110,null],[11,"clone","","",110,null],[11,"eq","","",111,null],[11,"ne","","",111,null],[11,"fmt","","",111,null],[11,"clone","","",111,null],[11,"header_name","","",111,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",111,null],[11,"fmt_header","","",111,null],[11,"fmt","","",111,null],[11,"eq","hyper::header::common::content_encoding","",112,null],[11,"ne","","",112,null],[11,"fmt","","",112,null],[11,"clone","","",112,null],[11,"deref","","",112,null],[11,"deref_mut","","",112,null],[11,"header_name","","",112,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",112,null],[11,"fmt_header","","",112,null],[11,"fmt","","",112,null],[11,"eq","hyper::header::common::content_language","",113,null],[11,"ne","","",113,null],[11,"fmt","","",113,null],[11,"clone","","",113,null],[11,"deref","","",113,null],[11,"deref_mut","","",113,null],[11,"header_name","","",113,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",113,null],[11,"fmt_header","","",113,null],[11,"fmt","","",113,null],[11,"eq","hyper::header::common::content_length","",114,null],[11,"ne","","",114,null],[11,"fmt","","",114,null],[11,"clone","","",114,null],[11,"header_name","","",114,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",114,null],[11,"fmt_header","","",114,null],[11,"fmt","","",114,null],[11,"deref","","",114,null],[11,"deref_mut","","",114,null],[11,"eq","hyper::header::common::content_range","",115,null],[11,"ne","","",115,null],[11,"fmt","","",115,null],[11,"clone","","",115,null],[11,"deref","","",115,null],[11,"deref_mut","","",115,null],[11,"header_name","","",115,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",115,null],[11,"fmt_header","","",115,null],[11,"fmt","","",115,null],[11,"fmt","","",116,null],[11,"clone","","",116,null],[11,"eq","","",116,null],[11,"ne","","",116,null],[11,"from_str","","",116,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",116,null],[11,"eq","hyper::header::common::content_type","",117,null],[11,"ne","","",117,null],[11,"fmt","","",117,null],[11,"clone","","",117,null],[11,"get_param","mime","",118,null],[11,"hash","","",118,null],[11,"fmt","","",118,null],[11,"clone","","",118,null],[11,"eq","","",118,null],[11,"hash","","",119,null],[11,"fmt","","",119,null],[11,"clone","","",119,null],[11,"as_str","","",119,null],[11,"deref","","",119,null],[11,"eq","","",119,null],[11,"eq","","",119,null],[11,"eq","","",119,null],[11,"eq","","",119,null],[11,"eq","collections::string","",66,null],[11,"fmt","mime","",119,null],[11,"from_str","","",119,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"hash","","",120,null],[11,"fmt","","",120,null],[11,"clone","","",120,null],[11,"as_str","","",120,null],[11,"deref","","",120,null],[11,"eq","","",120,null],[11,"eq","","",120,null],[11,"eq","","",120,null],[11,"eq","","",120,null],[11,"eq","collections::string","",66,null],[11,"fmt","mime","",120,null],[11,"from_str","","",120,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"hash","","",121,null],[11,"fmt","","",121,null],[11,"clone","","",121,null],[11,"as_str","","",121,null],[11,"deref","","",121,null],[11,"eq","","",121,null],[11,"eq","","",121,null],[11,"eq","","",121,null],[11,"eq","","",121,null],[11,"eq","collections::string","",66,null],[11,"fmt","mime","",121,null],[11,"from_str","","",121,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"hash","","",122,null],[11,"fmt","","",122,null],[11,"clone","","",122,null],[11,"as_str","","",122,null],[11,"deref","","",122,null],[11,"eq","","",122,null],[11,"eq","","",122,null],[11,"eq","","",122,null],[11,"eq","","",122,null],[11,"eq","collections::string","",66,null],[11,"fmt","mime","",122,null],[11,"from_str","","",122,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",118,null],[11,"from_str","","",118,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"deref","hyper::header::common::content_type","",117,null],[11,"deref_mut","","",117,null],[11,"header_name","","",117,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",117,null],[11,"fmt_header","","",117,null],[11,"fmt","","",117,null],[11,"json","","A constructor  to easily create a `Content-Type: application/json` header.",117,{"inputs":[],"output":{"name":"contenttype"}}],[11,"plaintext","","A constructor  to easily create a `Content-Type: text/plain; charset=utf-8` header.",117,{"inputs":[],"output":{"name":"contenttype"}}],[11,"html","","A constructor  to easily create a `Content-Type: text/html; charset=utf-8` header.",117,{"inputs":[],"output":{"name":"contenttype"}}],[11,"form_url_encoded","","A constructor  to easily create a `Content-Type: application/www-form-url-encoded` header.",117,{"inputs":[],"output":{"name":"contenttype"}}],[11,"jpeg","","A constructor  to easily create a `Content-Type: image/jpeg` header.",117,{"inputs":[],"output":{"name":"contenttype"}}],[11,"png","","A constructor  to easily create a `Content-Type: image/png` header.",117,{"inputs":[],"output":{"name":"contenttype"}}],[11,"eq","hyper::header::common::date","",123,null],[11,"ne","","",123,null],[11,"fmt","","",123,null],[11,"clone","","",123,null],[11,"deref","","",123,null],[11,"deref_mut","","",123,null],[11,"header_name","","",123,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",123,null],[11,"fmt_header","","",123,null],[11,"fmt","","",123,null],[11,"eq","hyper::header::common::etag","",124,null],[11,"ne","","",124,null],[11,"fmt","","",124,null],[11,"clone","","",124,null],[11,"new","hyper::header::shared::entity","Constructs a new EntityTag.\n# Panics\nIf the tag contains invalid characters.",125,{"inputs":[{"name":"bool"},{"name":"string"}],"output":{"name":"entitytag"}}],[11,"weak","","Constructs a new weak EntityTag.\n# Panics\nIf the tag contains invalid characters.",125,{"inputs":[{"name":"string"}],"output":{"name":"entitytag"}}],[11,"strong","","Constructs a new strong EntityTag.\n# Panics\nIf the tag contains invalid characters.",125,{"inputs":[{"name":"string"}],"output":{"name":"entitytag"}}],[11,"tag","","Get the tag.",125,null],[11,"set_tag","","Set the tag.\n# Panics\nIf the tag contains invalid characters.",125,null],[11,"strong_eq","","For strong comparison two entity-tags are equivalent if both are not weak and their\nopaque-tags match character-by-character.",125,null],[11,"weak_eq","","For weak comparison two entity-tags are equivalent if their\nopaque-tags match character-by-character, regardless of either or\nboth being tagged as &quot;weak&quot;.",125,null],[11,"strong_ne","","The inverse of `EntityTag.strong_eq()`.",125,null],[11,"weak_ne","","The inverse of `EntityTag.weak_eq()`.",125,null],[11,"deref","hyper::header::common::etag","",124,null],[11,"deref_mut","","",124,null],[11,"header_name","","",124,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",124,null],[11,"fmt_header","","",124,null],[11,"fmt","","",124,null],[11,"fmt","hyper::header::common::expect","",126,null],[11,"eq","","",126,null],[11,"clone","","",126,null],[11,"header_name","","",126,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",126,null],[11,"fmt_header","","",126,null],[11,"eq","hyper::header::common::expires","",127,null],[11,"ne","","",127,null],[11,"fmt","","",127,null],[11,"clone","","",127,null],[11,"deref","","",127,null],[11,"deref_mut","","",127,null],[11,"header_name","","",127,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",127,null],[11,"fmt_header","","",127,null],[11,"fmt","","",127,null],[11,"eq","hyper::header::common::from","",128,null],[11,"ne","","",128,null],[11,"fmt","","",128,null],[11,"clone","","",128,null],[11,"deref","","",128,null],[11,"deref_mut","","",128,null],[11,"header_name","","",128,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",128,null],[11,"fmt_header","","",128,null],[11,"fmt","","",128,null],[11,"fmt","hyper::header::common::host","",129,null],[11,"eq","","",129,null],[11,"ne","","",129,null],[11,"clone","","",129,null],[11,"header_name","","",129,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",129,null],[11,"fmt_header","","",129,null],[11,"eq","hyper::header::common::if_match","",130,null],[11,"ne","","",130,null],[11,"fmt","","",130,null],[11,"clone","","",130,null],[11,"header_name","","",130,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",130,null],[11,"fmt_header","","",130,null],[11,"fmt","","",130,null],[11,"eq","hyper::header::common::if_modified_since","",131,null],[11,"ne","","",131,null],[11,"fmt","","",131,null],[11,"clone","","",131,null],[11,"deref","","",131,null],[11,"deref_mut","","",131,null],[11,"header_name","","",131,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",131,null],[11,"fmt_header","","",131,null],[11,"fmt","","",131,null],[11,"eq","hyper::header::common::if_none_match","",132,null],[11,"ne","","",132,null],[11,"fmt","","",132,null],[11,"clone","","",132,null],[11,"header_name","","",132,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",132,null],[11,"fmt_header","","",132,null],[11,"fmt","","",132,null],[11,"eq","hyper::header::common::if_range","",133,null],[11,"ne","","",133,null],[11,"fmt","","",133,null],[11,"clone","","",133,null],[11,"header_name","","",133,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",133,null],[11,"fmt_header","","",133,null],[11,"fmt","","",133,null],[11,"eq","hyper::header::common::if_unmodified_since","",134,null],[11,"ne","","",134,null],[11,"fmt","","",134,null],[11,"clone","","",134,null],[11,"deref","","",134,null],[11,"deref_mut","","",134,null],[11,"header_name","","",134,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",134,null],[11,"fmt_header","","",134,null],[11,"fmt","","",134,null],[11,"eq","hyper::header::common::last_modified","",135,null],[11,"ne","","",135,null],[11,"fmt","","",135,null],[11,"clone","","",135,null],[11,"deref","","",135,null],[11,"deref_mut","","",135,null],[11,"header_name","","",135,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",135,null],[11,"fmt_header","","",135,null],[11,"fmt","","",135,null],[11,"eq","hyper::header::common::location","",136,null],[11,"ne","","",136,null],[11,"fmt","","",136,null],[11,"clone","","",136,null],[11,"deref","","",136,null],[11,"deref_mut","","",136,null],[11,"header_name","","",136,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",136,null],[11,"fmt_header","","",136,null],[11,"fmt","","",136,null],[11,"fmt","hyper::header::common::pragma","",137,null],[11,"eq","","",137,null],[11,"ne","","",137,null],[11,"clone","","",137,null],[11,"header_name","","",137,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",137,null],[11,"fmt_header","","",137,null],[11,"fmt","hyper::header::common::prefer","",138,null],[11,"clone","","",138,null],[11,"eq","","",138,null],[11,"ne","","",138,null],[11,"deref","","",138,null],[11,"deref_mut","","",138,null],[11,"header_name","","",138,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",138,null],[11,"fmt_header","","",138,null],[11,"fmt","","",139,null],[11,"clone","","",139,null],[11,"eq","","",139,null],[11,"ne","","",139,null],[11,"fmt","","",139,null],[11,"from_str","","",139,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","hyper::header::common::preference_applied","",140,null],[11,"clone","","",140,null],[11,"eq","","",140,null],[11,"ne","","",140,null],[11,"deref","","",140,null],[11,"deref_mut","","",140,null],[11,"header_name","","",140,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",140,null],[11,"fmt_header","","",140,null],[11,"fmt","hyper::header::common::range","",141,null],[11,"clone","","",141,null],[11,"eq","","",141,null],[11,"ne","","",141,null],[11,"fmt","","",142,null],[11,"clone","","",142,null],[11,"eq","","",142,null],[11,"ne","","",142,null],[11,"bytes","","Get the most common byte range header (&quot;bytes=from-to&quot;)",141,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"range"}}],[11,"bytes_multi","","Get byte range header with multiple subranges\n(&quot;bytes=from1-to1,from2-to2,fromX-toX&quot;)",141,{"inputs":[{"name":"vec"}],"output":{"name":"range"}}],[11,"fmt","","",142,null],[11,"fmt","","",141,null],[11,"from_str","","",141,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",142,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"header_name","","",141,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",141,null],[11,"fmt_header","","",141,null],[11,"eq","hyper::header::common::referer","",143,null],[11,"ne","","",143,null],[11,"fmt","","",143,null],[11,"clone","","",143,null],[11,"deref","","",143,null],[11,"deref_mut","","",143,null],[11,"header_name","","",143,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",143,null],[11,"fmt_header","","",143,null],[11,"fmt","","",143,null],[11,"eq","hyper::header::common::server","",144,null],[11,"ne","","",144,null],[11,"fmt","","",144,null],[11,"clone","","",144,null],[11,"deref","","",144,null],[11,"deref_mut","","",144,null],[11,"header_name","","",144,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",144,null],[11,"fmt_header","","",144,null],[11,"fmt","","",144,null],[11,"fmt","hyper::header::common::set_cookie","",145,null],[11,"eq","","",145,null],[11,"ne","","",145,null],[11,"clone","","",145,null],[11,"deref","","",145,null],[11,"deref_mut","","",145,null],[11,"header_name","","",145,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",145,null],[11,"fmt_header","","",145,null],[11,"from_cookie_jar","","Use this to create SetCookie header from CookieJar using\ncalculated delta.",145,{"inputs":[{"name":"cookiejar"}],"output":{"name":"setcookie"}}],[11,"apply_to_cookie_jar","","Use this on client to apply changes from SetCookie to CookieJar.\nNote that this will `panic!` if `CookieJar` is not root.",145,null],[11,"fmt","hyper::header::common::strict_transport_security","",146,null],[11,"eq","","",146,null],[11,"ne","","",146,null],[11,"clone","","",146,null],[11,"including_subdomains","","Create an STS header that includes subdomains",146,{"inputs":[{"name":"u64"}],"output":{"name":"stricttransportsecurity"}}],[11,"excluding_subdomains","","Create an STS header that excludes subdomains",146,{"inputs":[{"name":"u64"}],"output":{"name":"stricttransportsecurity"}}],[11,"from_str","","",146,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"header_name","","",146,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",146,null],[11,"fmt_header","","",146,null],[11,"eq","hyper::header::common::transfer_encoding","",147,null],[11,"ne","","",147,null],[11,"fmt","","",147,null],[11,"clone","","",147,null],[11,"deref","","",147,null],[11,"deref_mut","","",147,null],[11,"header_name","","",147,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",147,null],[11,"fmt_header","","",147,null],[11,"fmt","","",147,null],[11,"eq","hyper::header::common::upgrade","",148,null],[11,"ne","","",148,null],[11,"fmt","","",148,null],[11,"clone","","",148,null],[11,"deref","","",148,null],[11,"deref_mut","","",148,null],[11,"header_name","","",148,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",148,null],[11,"fmt_header","","",148,null],[11,"fmt","","",148,null],[11,"eq","","",149,null],[11,"ne","","",149,null],[11,"fmt","","",149,null],[11,"clone","","",149,null],[11,"from_str","","",149,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",149,null],[11,"eq","","",150,null],[11,"ne","","",150,null],[11,"fmt","","",150,null],[11,"clone","","",150,null],[11,"new","","Creates a new Protocol with the given name and version",150,{"inputs":[{"name":"protocolname"},{"name":"option"}],"output":{"name":"protocol"}}],[11,"from_str","","",150,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",150,null],[11,"eq","hyper::header::common::user_agent","",151,null],[11,"ne","","",151,null],[11,"fmt","","",151,null],[11,"clone","","",151,null],[11,"deref","","",151,null],[11,"deref_mut","","",151,null],[11,"header_name","","",151,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",151,null],[11,"fmt_header","","",151,null],[11,"fmt","","",151,null],[11,"eq","hyper::header::common::vary","",152,null],[11,"ne","","",152,null],[11,"fmt","","",152,null],[11,"clone","","",152,null],[11,"header_name","","",152,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",152,null],[11,"fmt_header","","",152,null],[11,"fmt","","",152,null],[11,"eq","hyper::header::shared::charset","",153,null],[11,"ne","","",153,null],[11,"fmt","","",153,null],[11,"clone","","",153,null],[11,"fmt","","",153,null],[11,"from_str","","",153,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","hyper::header::shared::encoding","",154,null],[11,"eq","","",154,null],[11,"ne","","",154,null],[11,"clone","","",154,null],[11,"fmt","","",154,null],[11,"from_str","","",154,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"eq","hyper::header::shared::entity","",125,null],[11,"ne","","",125,null],[11,"fmt","","",125,null],[11,"clone","","",125,null],[11,"fmt","","",125,null],[11,"from_str","","",125,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"cmp","hyper::header::shared::httpdate","",155,null],[11,"partial_cmp","","",155,null],[11,"lt","","",155,null],[11,"le","","",155,null],[11,"gt","","",155,null],[11,"ge","","",155,null],[11,"eq","","",155,null],[11,"ne","","",155,null],[11,"fmt","","",155,null],[11,"clone","","",155,null],[11,"from_str","","",155,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",155,null],[11,"partial_cmp","hyper::header::shared::quality_item","",156,null],[11,"lt","","",156,null],[11,"le","","",156,null],[11,"gt","","",156,null],[11,"ge","","",156,null],[11,"eq","","",156,null],[11,"ne","","",156,null],[11,"cmp","","",156,null],[11,"fmt","","",156,null],[11,"clone","","",156,null],[11,"fmt","","",156,null],[11,"default","","",156,{"inputs":[],"output":{"name":"quality"}}],[11,"fmt","","",157,null],[11,"eq","","",157,null],[11,"ne","","",157,null],[11,"clone","","",157,null],[11,"new","","Creates a new `QualityItem` from an item and a quality.\nThe item can be of any type.\nThe quality should be a value in the range [0, 1].",157,{"inputs":[{"name":"t"},{"name":"quality"}],"output":{"name":"qualityitem"}}],[11,"partial_cmp","","",157,null],[11,"fmt","","",157,null],[11,"from_str","","",157,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"eq","hyper::header::parsing","",158,null],[11,"ne","","",158,null],[11,"fmt","","",158,null],[11,"clone","","",158,null],[11,"fmt","","",158,null],[11,"clone","alloc::boxed","",86,null],[11,"clone","hyper::header","",159,null],[11,"new","","Creates a new, empty headers map.",159,{"inputs":[],"output":{"name":"headers"}}],[11,"set","","Set a header field to the corresponding value.",159,null],[11,"get_raw","","Access the raw value of a header.",159,null],[11,"set_raw","","Set the raw value of a header, bypassing any typed headers.",159,null],[11,"remove_raw","","Remove a header set by set_raw",159,null],[11,"get","","Get a reference to the header field&#39;s value, if it exists.",159,null],[11,"get_mut","","Get a mutable reference to the header field&#39;s value, if it exists.",159,null],[11,"has","","Returns a boolean of whether a certain header is in the map.",159,null],[11,"remove","","Removes a header from the map, if one existed.\nReturns true if a header has been removed.",159,null],[11,"iter","","Returns an iterator over the header fields.",159,null],[11,"len","","Returns the number of headers in the map.",159,null],[11,"clear","","Remove all headers from the map.",159,null],[11,"eq","","",159,null],[11,"fmt","","",159,null],[11,"fmt","","",159,null],[11,"next","","",160,null],[11,"is","","Check if a HeaderView is a certain Header.",161,null],[11,"name","","Get the Header name as a slice.",161,null],[11,"value","","Cast the value to a certain Header type.",161,null],[11,"value_string","","Get just the header value as a String.",161,null],[11,"fmt","","",161,null],[11,"fmt","","",161,null],[11,"extend","","",159,null],[11,"from_iter","","",159,{"inputs":[{"name":"i"}],"output":{"name":"headers"}}],[11,"fmt","","",162,null],[11,"fmt","","",162,null],[11,"fmt","hyper::http::h1","",163,null],[11,"write","","",163,null],[11,"flush","","",163,null],[11,"read","","",163,null],[11,"set_outgoing","","",163,null],[11,"get_incoming","","",163,null],[11,"has_body","","",163,null],[11,"set_read_timeout","","",163,null],[11,"set_write_timeout","","",163,null],[11,"close_connection","","",163,null],[11,"into_inner","","Consumes the `Http11Message` and returns the underlying `NetworkStream`.",163,null],[11,"get_ref","","Gets a mutable reference to the underlying `NetworkStream`, regardless of the state of the\n`Http11Message`.",163,null],[11,"get_mut","","Gets a mutable reference to the underlying `NetworkStream`, regardless of the state of the\n`Http11Message`.",163,null],[11,"with_stream","","Creates a new `Http11Message` that will use the given `NetworkStream` for communicating to\nthe peer.",163,{"inputs":[{"name":"box"}],"output":{"name":"http11message"}}],[11,"flush_outgoing","","Flushes the current outgoing content and moves the stream into the `stream` property.",163,null],[11,"new_message","","",164,null],[11,"with_connector","","Creates a new `Http11Protocol` instance that will use the given `NetworkConnector` for\nestablishing HTTP connections.",164,{"inputs":[{"name":"c"}],"output":{"name":"http11protocol"}}],[11,"into_inner","","Unwraps this HttpReader and returns the underlying Reader.",165,null],[11,"get_ref","","Gets a borrowed reference to the underlying Reader.",165,null],[11,"get_mut","","Gets a mutable reference to the underlying Reader.",165,null],[11,"fmt","","",165,null],[11,"read","","",165,null],[11,"into_inner","","Unwraps the HttpWriter and returns the underlying Writer.",166,null],[11,"get_ref","","Access the inner Writer.",166,null],[11,"get_mut","","Access the inner Writer mutably.",166,null],[11,"end","","Ends the HttpWriter, and returns the underlying Writer.",166,null],[11,"fmt","","",167,null],[11,"from","std::io::error","",168,{"inputs":[{"name":"enderror"}],"output":{"name":"error"}}],[11,"write","hyper::http::h1","",166,null],[11,"flush","","",166,null],[11,"fmt","","",166,null],[11,"fmt","","",169,null],[11,"with_connector","hyper::http::h2","Create a new `Http2Protocol` that will use the given `NetworkConnector` to establish TCP\nconnections to the server.",170,{"inputs":[{"name":"c"}],"output":{"name":"http2protocol"}}],[11,"new_message","","",170,null],[11,"fmt","","",171,null],[11,"write","","",171,null],[11,"flush","","",171,null],[11,"read","","",171,null],[11,"set_outgoing","","",171,null],[11,"get_incoming","","",171,null],[11,"has_body","","",171,null],[11,"set_read_timeout","","",171,null],[11,"set_write_timeout","","",171,null],[11,"close_connection","","",171,null],[11,"fmt","hyper::http::message","",172,null],[11,"clone","","",172,null],[11,"fmt","","",173,null],[11,"clone","","",173,null],[11,"is","multipart::server","Is the underlying type in this trait object a T?",174,null],[11,"downcast_ref","","If the underlying type is T, get a reference to the contained data.",174,null],[11,"downcast_mut","","If the underlying type is T, get a mutable reference to the contained\ndata.",174,null],[11,"downcast","","If the underlying type is T, extract it.",174,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"fmt","hyper::http","",175,null],[11,"eq","","",175,null],[11,"ne","","",175,null],[11,"clone","","",175,null],[11,"next","hyper::net","",176,null],[11,"from","alloc::boxed","",86,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"fmt","","",86,null],[11,"is","multipart::server","Is the underlying type in this trait object a T?",177,null],[11,"downcast_ref","","If the underlying type is T, get a reference to the contained data.",177,null],[11,"downcast_mut","","If the underlying type is T, get a mutable reference to the contained\ndata.",177,null],[11,"downcast","","If the underlying type is T, extract it.",177,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"is","","Is the underlying type in this trait object a T?",177,null],[11,"downcast_ref","","If the underlying type is T, get a reference to the contained data.",177,null],[11,"downcast_mut","","If the underlying type is T, get a mutable reference to the contained\ndata.",177,null],[11,"downcast","","If the underlying type is T, extract it.",177,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"clone","hyper::net","",178,null],[11,"from","","",178,{"inputs":[{"name":"tcplistener"}],"output":{"name":"httplistener"}}],[11,"new","","Start listening to an address over HTTP.",178,{"inputs":[{"name":"to"}],"output":{"name":"result"}}],[11,"accept","","",178,null],[11,"local_addr","","",178,null],[11,"as_raw_fd","","",178,null],[11,"from_raw_fd","","",178,{"inputs":[{"name":"i32"}],"output":{"name":"httplistener"}}],[11,"clone","","",179,null],[11,"fmt","","",179,null],[11,"read","","",179,null],[11,"write","","",179,null],[11,"flush","","",179,null],[11,"as_raw_fd","","",179,null],[11,"from_raw_fd","","",179,{"inputs":[{"name":"i32"}],"output":{"name":"httpstream"}}],[11,"peer_addr","","",179,null],[11,"set_read_timeout","","",179,null],[11,"set_write_timeout","","",179,null],[11,"close","","",179,null],[11,"default","","",180,{"inputs":[],"output":{"name":"httpconnector"}}],[11,"clone","","",180,null],[11,"fmt","","",180,null],[11,"connect","","",180,null],[11,"clone","","",181,null],[11,"fmt","","",181,null],[11,"read","","",181,null],[11,"write","","",181,null],[11,"flush","","",181,null],[11,"peer_addr","","",181,null],[11,"set_read_timeout","","",181,null],[11,"set_write_timeout","","",181,null],[11,"close","","",181,null],[11,"clone","","",182,null],[11,"new","","Start listening to an address over HTTPS.",182,{"inputs":[{"name":"to"},{"name":"s"}],"output":{"name":"result"}}],[11,"with_listener","","Construct an HttpsListener from a bound `TcpListener`.",182,{"inputs":[{"name":"httplistener"},{"name":"s"}],"output":{"name":"httpslistener"}}],[11,"accept","","",182,null],[11,"local_addr","","",182,null],[11,"default","","",183,{"inputs":[],"output":{"name":"httpsconnector"}}],[11,"fmt","","",183,null],[11,"new","","Create a new connector using the provided SSL implementation.",183,{"inputs":[{"name":"s"}],"output":{"name":"httpsconnector"}}],[11,"connect","","",183,null],[11,"clone","hyper::net::openssl","",184,null],[11,"fmt","","",184,null],[11,"default","","",184,{"inputs":[],"output":{"name":"openssl"}}],[11,"with_cert_and_key","","Ease creating an `Openssl` with a certificate and key.",184,{"inputs":[{"name":"c"},{"name":"k"}],"output":{"name":"result"}}],[11,"wrap_client","","",184,null],[11,"wrap_server","","",184,null],[11,"peer_addr","openssl::ssl","",185,null],[11,"set_read_timeout","","",185,null],[11,"set_write_timeout","","",185,null],[11,"close","","",185,null],[11,"read","hyper::server::request","",15,null],[11,"fmt","hyper::server::response","",186,null],[11,"status","","The status of this response.",186,null],[11,"headers","","The headers of this response.",186,null],[11,"construct","","Construct a Response from its constituent parts.",186,{"inputs":[{"name":"httpversion"},{"name":"httpwriter"},{"name":"statuscode"},{"name":"headers"}],"output":{"name":"response"}}],[11,"deconstruct","","Deconstruct this Response into its constituent parts.",186,null],[11,"new","","Creates a new Response that can be used to write to a network stream.",186,{"inputs":[{"name":"write"},{"name":"headers"}],"output":{"name":"response"}}],[11,"send","","Writes the body and ends the response.",186,null],[11,"start","","Consume this Response&lt;Fresh&gt;, writing the Headers and Status and\ncreating a Response&lt;Streaming&gt;",186,null],[11,"status_mut","","Get a mutable reference to the status.",186,null],[11,"headers_mut","","Get a mutable reference to the Headers.",186,null],[11,"end","","Flushes all writing of a response to the client.",186,null],[11,"write","","",186,null],[11,"flush","","",186,null],[11,"drop","","",186,null],[11,"fmt","hyper::server","",187,null],[11,"new","","Creates a new server with the provided handler.",187,{"inputs":[{"name":"l"}],"output":{"name":"server"}}],[11,"keep_alive","","Controls keep-alive for this server.",187,null],[11,"set_read_timeout","","Sets the read timeout for all Request reads.",187,null],[11,"set_write_timeout","","Sets the write timeout for all Response writes.",187,null],[11,"http","","Creates a new server that will handle `HttpStream`s.",187,{"inputs":[{"name":"to"}],"output":{"name":"result"}}],[11,"https","","Creates a new server that will handle `HttpStream`s over SSL.",187,{"inputs":[{"name":"a"},{"name":"s"}],"output":{"name":"result"}}],[11,"handle","","Binds to a socket and starts handling connections.",187,null],[11,"handle_threads","","Binds to a socket and starts handling connections with the provided\nnumber of threads.",187,null],[11,"fmt","","",188,null],[11,"drop","","",188,null],[11,"close","","Warning: This function doesn&#39;t work. The server remains listening after you called\nit. See https://github.com/hyperium/hyper/issues/338 for more details.",188,null],[11,"hash","hyper::status","",189,null],[11,"fmt","","",189,null],[11,"canonical_reason","","Get the standardised `reason-phrase` for this status code.",189,null],[11,"class","","Determine the class of a status code, based on its first digit.",189,null],[11,"is_informational","","Check if class is Informational.",189,null],[11,"is_success","","Check if class is Success.",189,null],[11,"is_redirection","","Check if class is Redirection.",189,null],[11,"is_client_error","","Check if class is ClientError.",189,null],[11,"is_server_error","","Check if class is ServerError.",189,null],[11,"is_strange_status","","Check if class is NoClass",189,null],[11,"fmt","","",189,null],[11,"eq","","",189,null],[11,"clone","","",189,null],[11,"partial_cmp","","",189,null],[11,"cmp","","",189,null],[11,"cmp","","",190,null],[11,"partial_cmp","","",190,null],[11,"eq","","",190,null],[11,"clone","","",190,null],[11,"fmt","","",190,null],[11,"default_code","","Get the default status code for the class.",190,null],[11,"clone","hyper::uri","",191,null],[11,"eq","","",191,null],[11,"ne","","",191,null],[11,"fmt","","",191,null],[11,"from_str","","",191,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",191,null],[11,"fmt","hyper::version","",192,null],[11,"hash","","",192,null],[11,"cmp","","",192,null],[11,"clone","","",192,null],[11,"partial_cmp","","",192,null],[11,"eq","","",192,null],[11,"fmt","","",192,null],[3,"HyperRequest","multipart::server::hyper","A request bundles several parts of an incoming `NetworkStream`, given to a `Handler`.",null,null],[12,"remote_addr","","The IP address of the remote connection.",15,null],[12,"method","","The `Method`, such as `Get`, `Post`, etc.",15,null],[12,"headers","","The headers of the incoming request.",15,null],[12,"uri","","The target request-uri for this request.",15,null],[12,"version","","The version of HTTP for this request.",15,null],[3,"Switch","","A container that implements `hyper::server::Handler` which will switch\nthe handler implementation depending on if the incoming request is multipart or not.",null,null],[8,"MultipartHandler","","A trait defining a type that can handle an incoming multipart request.",null,null],[10,"handle_multipart","","Generate a response from this multipart request.",193,null],[11,"new","","Create a new `Switch` instance where\n`normal` handles normal Hyper requests and `multipart` handles Multipart requests",194,{"inputs":[{"name":"h"},{"name":"m"}],"output":{"name":"switch"}}],[11,"handle","","",194,null],[11,"multipart_boundary","","",15,null],[11,"body","","",15,null],[0,"iron","multipart::server","Integration with the [Iron](https://ironframework.io) framework, enabled with the `iron` feature (optional). Includes a `BeforeMiddleware` implementation.",null,null],[3,"Intercept","multipart::server::iron","A `BeforeMiddleware` for Iron which will intercept and read-out multipart requests and store\nthe result in the request.",null,null],[12,"temp_dir_path","","The parent directory for all temporary directories created by this middleware.\nWill be created if it doesn&#39;t exist (lazy).",195,null],[12,"file_size_limit","","The size limit of uploaded files, in bytes.",195,null],[12,"file_count_limit","","The limit on the number of files which will be saved from\nthe request. Requests which exceed this count will be rejected.",195,null],[12,"limit_behavior","","What to do when a file count or size limit has been exceeded.",195,null],[3,"FileSizeLimitError","","An error returned from `Intercept` when the size limit\nfor an individual file is exceeded.",null,null],[12,"field","","The field where the error occurred.",196,null],[12,"filename","","The filename of the oversize file, if it was provided.",196,null],[3,"FileCountLimitError","","An error returned from `Intercept` when the file count limit\nfor a single request was exceeded.",null,null],[4,"LimitBehavior","","The behavior of `Intercept` when a file size or count limit is exceeded.",null,null],[13,"ThrowError","","Return an error from the middleware describing the issue.",197,null],[13,"Continue","","Ignore the limit.",197,null],[17,"DEFAULT_FILE_SIZE_LIMIT","","The default file size limit for [`Intercept`](struct.Intercept.html), in bytes.",null,null],[17,"DEFAULT_FILE_COUNT_LIMIT","","The default file count limit for [`Intercept`](struct.Intercept.html).",null,null],[11,"fmt","","",195,null],[11,"temp_dir_path","","Set the `temp_dir_path` for this middleware.",195,null],[11,"file_size_limit","","Set the `file_size_limit` for this middleware.",195,null],[11,"file_count_limit","","Set the `file_count_limit` for this middleware.",195,null],[11,"limit_behavior","","Set the `limit_behavior` for this middleware.",195,null],[11,"default","","",195,{"inputs":[],"output":{"name":"self"}}],[11,"before","","",195,null],[11,"fmt","","",197,null],[11,"clone","","",197,null],[11,"fmt","","",196,null],[11,"description","","",196,null],[11,"fmt","","",196,null],[11,"into","","",196,null],[11,"fmt","","",198,null],[11,"description","","",198,null],[11,"fmt","","",198,null],[11,"into","","",198,null],[0,"nickel","multipart::server","Server-side integration with [Nickel](http://nickel.rs/) via the `nickel_` feature\n(optional, enables `hyper` feature).",null,null],[0,"tiny_http","","Integration with [tiny_http](https://github.com/frewsxcv/tiny-http) with the `tiny_http`\nfeature (optional).",null,null],[11,"secure","tiny_http::request","Returns true if the request was made through HTTPS.",199,null],[11,"method","","Returns the method requested by the client (eg. `GET`, `POST`, etc.).",199,null],[11,"url","","Returns the resource requested by the client.",199,null],[11,"headers","","Returns a list of all headers sent by the client.",199,null],[11,"http_version","","Returns the HTTP version of the request.",199,null],[11,"body_length","","Returns the length of the body in bytes.",199,null],[11,"remote_addr","","Returns the address of the client that sent this request.",199,null],[11,"as_reader","","Allows to read the body of the request.",199,null],[11,"into_writer","","Turns the `Request` into a writer.",199,null],[11,"respond","","Sends a response to this request.",199,null],[11,"partial_cmp","tiny_http::common","",200,null],[11,"lt","","",200,null],[11,"le","","",200,null],[11,"gt","","",200,null],[11,"ge","","",200,null],[11,"cmp","","",200,null],[11,"fmt","","",200,null],[11,"clone","","",200,null],[11,"eq","","",200,null],[11,"ne","","",200,null],[11,"default_reason_phrase","","Returns the default reason phrase for this status code.\nFor example the status code 404 corresponds to &quot;Not Found&quot;.",200,null],[11,"from","","",200,{"inputs":[{"name":"i8"}],"output":{"name":"statuscode"}}],[11,"from","","",200,{"inputs":[{"name":"u8"}],"output":{"name":"statuscode"}}],[11,"from","","",200,{"inputs":[{"name":"i16"}],"output":{"name":"statuscode"}}],[11,"from","","",200,{"inputs":[{"name":"u16"}],"output":{"name":"statuscode"}}],[11,"from","","",200,{"inputs":[{"name":"i32"}],"output":{"name":"statuscode"}}],[11,"from","","",200,{"inputs":[{"name":"u32"}],"output":{"name":"statuscode"}}],[11,"as_ref","","",200,null],[11,"eq","","",200,null],[11,"partial_cmp","","",200,null],[11,"clone","","",201,null],[11,"fmt","","",201,null],[11,"from_bytes","","Builds a `Header` from two `Vec&lt;u8&gt;`s or two `&amp;[u8]`s.",201,{"inputs":[{"name":"b1"},{"name":"b2"}],"output":{"name":"result"}}],[11,"from_str","","",201,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",201,null],[11,"clone","","",202,null],[11,"fmt","","",202,null],[11,"from_bytes","","",202,{"inputs":[{"name":"b"}],"output":{"name":"result"}}],[11,"as_str","","",202,null],[11,"equiv","","",202,null],[11,"from_str","","",202,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",202,null],[11,"eq","","",202,null],[11,"clone","","",203,null],[11,"fmt","","",203,null],[11,"as_str","","",203,null],[11,"from_str","","",203,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",203,null],[11,"eq","","",203,null],[11,"cmp","","",204,null],[11,"eq","","",204,null],[11,"ne","","",204,null],[11,"clone","","",204,null],[11,"fmt","","",204,null],[11,"fmt","","",204,null],[11,"partial_cmp","","",204,null],[11,"eq","","",204,null],[11,"partial_cmp","","",204,null],[11,"from","","",204,null],[11,"fmt","tiny_http::request","",199,null],[11,"drop","","",199,null],[11,"new","tiny_http::response","Creates a new Response object.",205,{"inputs":[{"name":"statuscode"},{"name":"vec"},{"name":"r"},{"name":"option"},{"name":"option"}],"output":{"name":"response"}}],[11,"add_header","","Adds a header to the list.\nDoes all the checks.",205,null],[11,"with_header","","Returns the same request, but with an additional header.",205,null],[11,"with_status_code","","Returns the same request, but with a different status code.",205,null],[11,"with_data","","Returns the same request, but with different data.",205,null],[11,"raw_print","","Prints the HTTP response to a writer.",205,null],[11,"boxed","","Turns this response into a `Response&lt;Box&lt;Read + Send&gt;&gt;`.",205,null],[11,"from_file","","Builds a new `Response` from a `File`.",205,{"inputs":[{"name":"file"}],"output":{"name":"response"}}],[11,"from_data","","",205,{"inputs":[{"name":"d"}],"output":{"name":"response"}}],[11,"from_string","","",205,{"inputs":[{"name":"s"}],"output":{"name":"response"}}],[11,"empty","","Builds an empty `Response` with the given status code.",205,{"inputs":[{"name":"s"}],"output":{"name":"response"}}],[11,"new_empty","","DEPRECATED. Use `empty` instead.",205,{"inputs":[{"name":"statuscode"}],"output":{"name":"response"}}],[11,"clone","","",205,null],[11,"clone","tiny_http","",206,null],[11,"fmt","","",206,null],[11,"clone","","",207,null],[11,"fmt","","",207,null],[11,"http","","Shortcut for a simple server on a specific address.",208,{"inputs":[{"name":"a"}],"output":{"name":"result"}}],[11,"new","","Builds a new server that listens on the specified address.",208,{"inputs":[{"name":"serverconfig"}],"output":{"name":"result"}}],[11,"incoming_requests","","Returns an iterator for all the incoming requests.",208,null],[11,"server_addr","","Returns the address the server is listening to.",208,null],[11,"num_connections","","Returns the number of clients currently connected to the server.",208,null],[11,"recv","","Blocks until an HTTP request has been submitted and returns it.",208,null],[11,"try_recv","","Same as `recv()` but doesn&#39;t block.",208,null],[11,"next","","",209,null],[11,"drop","","",208,null],[3,"TinyHttpRequest","multipart::server::tiny_http","Represents an HTTP request made by a client.",null,null],[8,"HttpRequest","multipart::server","A server-side HTTP request that may or may not be multipart.",null,null],[16,"Body","","The body of this request.",210,null],[10,"multipart_boundary","","Get the boundary string of this request if it is a POST request\nwith the `Content-Type` header set to `multipart/form-data`.",210,null],[10,"body","","Return the request body for reading.",210,null],[11,"from_request","","If the given `HttpRequest` is a multipart/form-data POST request,\nreturn the request body wrapped in the multipart reader. Otherwise,\nreturns the original request.",211,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"with_body","","Construct a new `Multipart` with the given body reader and boundary.\nThis will prepend the requisite `&quot;--&quot;` to the boundary.",211,{"inputs":[{"name":"b"},{"name":"bnd"}],"output":{"name":"self"}}],[11,"read_entry","","Read the next entry from this multipart request, returning a struct with the field&#39;s name and\ndata. See `MultipartField` for more info.",211,null],[11,"foreach_entry","","Call `f` for each entry in the multipart request.",211,null],[11,"save_all","","Read the request fully, parsing all fields and saving all files in a new temporary\ndirectory under the OS temporary directory. ",211,null],[11,"save_all_under","","Read the request fully, parsing all fields and saving all files in a new temporary\ndirectory under `dir`. ",211,null],[11,"save_all_limited","","Read the request fully, parsing all fields and saving all fields in a new temporary\ndirectory under the OS temporary directory.",211,null],[11,"save_all_under_limited","","Read the request fully, parsing all fields and saving all files in a new temporary\ndirectory under `dir`. ",211,null],[11,"borrow","","",211,null],[11,"fmt","","",12,null],[11,"to_entries","","Take the `Entries` from `self`, if applicable, and discarding\nthe error, if any.",12,null],[11,"to_opt","","Decompose `self` to `(Option&lt;Entries&gt;, Option&lt;io::Error&gt;)`",12,null],[11,"to_result","","Map `self` to an `io::Result`, discarding the error in the `Partial` case.",12,null],[11,"fmt","","",9,null],[11,"fmt","","",13,null],[11,"as_text","","Borrow this payload as a text field, if possible.",13,null],[11,"as_file","","Borrow this payload as a file field, if possible.\nMutably borrows so the contents can be read.",13,null],[11,"fmt","","",212,null],[11,"save_to","","Save this file to the given output stream.",212,null],[11,"save_to_limited","","Save this file to the given output stream, **truncated** to `limit`\n(no more than `limit` bytes will be written out).",212,null],[11,"save_as","","Save this file to `path`.",212,null],[11,"save_in","","Save this file in the directory pointed at by `dir`,\nusing a random alphanumeric string as the filename.",212,null],[11,"save_as_limited","","Save this file to `path`, **truncated** to `limit` (no more than `limit` bytes will be written out).",212,null],[11,"save_in_limited","","Save this file in the directory pointed at by `dir`,\nusing a random alphanumeric string as the filename.",212,null],[11,"filename","","Get the filename of this entry, if supplied.",212,null],[11,"content_type","","Get the MIME type (`Content-Type` value) of this file, if supplied by the client,\nor `&quot;applicaton/octet-stream&quot;` otherwise.",212,null],[11,"read","","",212,null],[11,"fill_buf","","",212,null],[11,"consume","","",212,null],[11,"fmt","","",10,null],[11,"as_path","","Get the path of this directory, either temporary or permanent.",14,null],[11,"is_temporary","","Returns `true` if this is a temporary directory which will be deleted on-drop.",14,null],[11,"into_path","","Unwrap the `PathBuf` from `self`; if this is a temporary directory,\nit will be converted to a permanent one.",14,null],[11,"keep","","If this `SaveDir` is temporary, convert it to permanent.\nThis is a no-op if it already is permanent.",14,null],[11,"delete","","Delete this directory and its contents, regardless of its permanence.",14,null],[11,"as_ref","","",14,null],[11,"fmt","","",14,null],[11,"fmt","","",11,null],[14,"chain_result!","multipart","Chain a series of results together, with or without previous results.",null,null]],"paths":[[3,"Request"],[3,"LazyError"],[3,"Multipart"],[3,"PreparedFields"],[3,"SizedRequest"],[8,"HttpRequest"],[8,"HttpStream"],[3,"Multipart"],[3,"Sink"],[3,"MultipartField"],[3,"Entries"],[3,"SavedFile"],[4,"SaveResult"],[4,"MultipartData"],[4,"SaveDir"],[3,"HyperRequest"],[3,"Config"],[3,"Pool"],[3,"PooledStream"],[3,"Response"],[3,"Client"],[3,"RequestBuilder"],[4,"Body"],[3,"Url"],[4,"RedirectPolicy"],[4,"Error"],[4,"Method"],[3,"Accept"],[3,"Vec"],[3,"BinaryHeap"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"BTreeMap"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Range"],[3,"ValuesMut"],[3,"RangeMut"],[4,"Entry"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"BTreeSet"],[3,"Iter"],[3,"IntoIter"],[3,"Range"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"],[4,"Cow"],[3,"EnumSet"],[3,"Iter"],[3,"Iter"],[3,"IntoIter"],[3,"LinkedList"],[3,"IterMut"],[3,"FrontPlace"],[3,"BackPlace"],[3,"RangeFrom"],[3,"RangeTo"],[3,"Range"],[3,"EncodeUtf16"],[3,"String"],[4,"SearchStep"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[4,"ParseError"],[3,"Drain"],[3,"IntoIter"],[3,"Drain"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[4,"Bound"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[3,"Box"],[3,"AccessControlAllowCredentials"],[3,"AccessControlAllowHeaders"],[3,"AccessControlAllowMethods"],[4,"AccessControlAllowOrigin"],[3,"AccessControlExposeHeaders"],[3,"AccessControlMaxAge"],[3,"AccessControlRequestHeaders"],[3,"AccessControlRequestMethod"],[3,"AcceptCharset"],[3,"AcceptEncoding"],[3,"AcceptLanguage"],[3,"AcceptRanges"],[4,"RangeUnit"],[3,"Allow"],[3,"Authorization"],[3,"Basic"],[3,"Bearer"],[3,"CacheControl"],[4,"CacheDirective"],[3,"Cookie"],[4,"ConnectionOption"],[3,"Connection"],[4,"DispositionType"],[4,"DispositionParam"],[3,"ContentDisposition"],[3,"ContentEncoding"],[3,"ContentLanguage"],[3,"ContentLength"],[3,"ContentRange"],[4,"ContentRangeSpec"],[3,"ContentType"],[3,"Mime"],[4,"TopLevel"],[4,"SubLevel"],[4,"Attr"],[4,"Value"],[3,"Date"],[3,"ETag"],[3,"EntityTag"],[4,"Expect"],[3,"Expires"],[3,"From"],[3,"Host"],[4,"IfMatch"],[3,"IfModifiedSince"],[4,"IfNoneMatch"],[4,"IfRange"],[3,"IfUnmodifiedSince"],[3,"LastModified"],[3,"Location"],[4,"Pragma"],[3,"Prefer"],[4,"Preference"],[3,"PreferenceApplied"],[4,"Range"],[4,"ByteRangeSpec"],[3,"Referer"],[3,"Server"],[3,"SetCookie"],[3,"StrictTransportSecurity"],[3,"TransferEncoding"],[3,"Upgrade"],[4,"ProtocolName"],[3,"Protocol"],[3,"UserAgent"],[4,"Vary"],[4,"Charset"],[4,"Encoding"],[3,"HttpDate"],[3,"Quality"],[3,"QualityItem"],[3,"ExtendedValue"],[3,"Headers"],[3,"HeadersItems"],[3,"HeaderView"],[3,"HeaderFormatter"],[3,"Http11Message"],[3,"Http11Protocol"],[4,"HttpReader"],[4,"HttpWriter"],[3,"EndError"],[3,"Error"],[3,"Incoming"],[3,"Http2Protocol"],[3,"Http2Message"],[3,"RequestHead"],[3,"ResponseHead"],[8,"HttpMessage"],[3,"RawStatus"],[3,"NetworkConnections"],[8,"NetworkStream"],[3,"HttpListener"],[3,"HttpStream"],[3,"HttpConnector"],[4,"HttpsStream"],[3,"HttpsListener"],[3,"HttpsConnector"],[3,"Openssl"],[3,"SslStream"],[3,"Response"],[3,"Server"],[3,"Listening"],[4,"StatusCode"],[4,"StatusClass"],[4,"RequestUri"],[4,"HttpVersion"],[8,"MultipartHandler"],[3,"Switch"],[3,"Intercept"],[3,"FileSizeLimitError"],[4,"LimitBehavior"],[3,"FileCountLimitError"],[3,"TinyHttpRequest"],[3,"StatusCode"],[3,"Header"],[3,"HeaderField"],[4,"Method"],[3,"HTTPVersion"],[3,"Response"],[3,"ServerConfig"],[3,"SslConfig"],[3,"Server"],[3,"IncomingRequests"],[8,"HttpRequest"],[3,"Multipart"],[3,"MultipartFile"]]};
initSearch(searchIndex);
